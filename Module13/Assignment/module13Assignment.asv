
clearvars
clc
vol = niftiread('data/sub-13_T1w.nii.gz');
%vol = flip (permute(vol, [2 3 1]), 1);
vol = flipdim(permute (vol, [2 1 3]) ,1);
%%
%%volshow(vol)
volumeViewer(vol)
%% Look at Slice 102 and Slice 119 ---
sliceNumber = 143;
% Display slice 102 using imshow
figure;
imshow(vol(:,:,sliceNumber), []);
title('Slice 143');
hold off;
%%
slice = vol(:,:,sliceNumber);
h = imhist(slice); % Compute histogram
optimalThreshold = minimumErrorThreshold(h);
disp(['Optimal Threshold: ', num2str(optimalThreshold)]);
binaryImage = slice > optimalThreshold;
showPreprocessingImages(slice, binaryImage, optimalThreshold)

%%
slice = vol(:,:,sliceNumber);
[counts,x] = imhist(slice,16);
figure;
stem(x,counts);
T = otsuthresh(counts);

%%
function [sigma2_0, sigma2_1, N] = makeSigmaTable(h, K)
    % Initialize variables
    n0 = 0;
    A0 = 0;
    B0 = 0;
    sigma2_0 = zeros(1, K);
    
    % Calculate sigma2_0 for each q
    for q = 1:K
        n0 = n0 + h(q);
        A0 = A0 + h(q) * (q - 1);
        B0 = B0 + h(q) * (q - 1)^2;
        if n0 > 0
            sigma2_0(q) = 1/12 + (B0 - (A0^2 / n0)) / n0;
        else
            sigma2_0(q) = 0;
        end
    end
    
    % Remaining variables for sigma2_1
    N = n0; % Total pixel count
    n1 = 0;
    A1 = 0;
    B1 = 0;
    sigma2_1 = zeros(1, K);
    
    for q = K-1:-1:1
        n1 = n1 + h(q + 1);
        A1 = A1 + h(q + 1) * (q);
        B1 = B1 + h(q + 1) * (q)^2;
        if n1 > 0
            sigma2_1(q) = 1/12 + (B1 - (A1^2 / n1)) / n1;
        else
            sigma2_1(q) = 0;
        end
    end
end

function t = minimumErrorThreshold(h)
    % Input: h - grayscale histogram
    % Output: t - optimal threshold for binary classification
    
    K = length(h); % Number of intensity levels
    [sigma2_0, sigma2_1, N] = makeSigmaTable(h, K); % Get sigma tables and total pixel count
    
    % Initialize variables
    n0 = 0;
    q_min = -1;
    e_min = Inf;
    
    % Iterate through all possible thresholds
    for q = 1:K-2
        n0 = n0 + h(q);
        n1 = N - n0;
        if n0 > 0 && n1 > 0
            P0 = n0 / N; % Probability of class 0
            P1 = n1 / N; % Probability of class 1
            
            % Compute the error
            e = P0 * log(sigma2_0(q)) + P1 * log(sigma2_1(q)) - ...
                2 * (P0 * log(P0) + P1 * log(P1));
            
            % Update minimum error and threshold
            if e < e_min
                e_min = e;
                q_min = q;
            end
        end
    end
    
    % Return the optimal threshold
    t = q_min - 1; 
end

%%
function showPreprocessingImages(Img, binaryImg, threshold)
figure;
t = tiledlayout(1, 2, 'TileSpacing', 'compact', 'Padding', 'compact');

% Add a title for the entire figure
txt = sprintf('Slice 143 original (left) binary (right) with minimum error thresholding:%d', threshold);
title(t, txt, 'FontSize', 24, 'FontWeight', 'bold');
fontSize = 14;

nexttile;
imshow(Img, []);  % Display original image.
title('Original Image', 'FontSize', fontSize,'FontWeight','bold');
nexttile;
imshow(binaryImg, []);  % Display binary image.
title('Binary Image', 'FontSize', fontSize,'FontWeight','bold');
hold off
end